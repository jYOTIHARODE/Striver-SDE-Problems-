// arr[] = {10,2,3,4,5,9,7,8}
//     x = 23
// sum of output is equal to 23
// i.e. 3+5+7+8

// Hashing Based Solution - O(n^2)
// store sums of all pairs in a hash table 
// Traverse through all pairs again and search for X-(current pair sum) in the hash table 
// If pair found, then make sure that all elements are distinct 

#include <bits/stdc++.h>
using namespace std;

void findFourElements(int arr[], int n, int X)
{
	unordered_map<int, pair<int, int> > mp; 
	for (int i = 0; i < n - 1; i++)
		for (int j = i + 1; j < n; j++)
			mp[arr[i] + arr[j]] = { i, j };

	for (int i = 0; i < n - 1; i++) {
		for (int j = i + 1; j < n; j++) {
			int sum = arr[i] + arr[j];
			if (mp.find(X - sum) != mp.end()) {
				pair<int, int> p = mp[X - sum];
				if (p.first != i && p.first != j && p.second != i && p.second != j) {
					cout << arr[i] << ", " << arr[j] << ", "<< arr[p.first] << ", "<< arr[p.second]<<endl;
					return;
				}
			}
		}
	}
}

int main()
{
	int arr[] = { 10, 20, 30, 40, 1, 2 };
	int n = sizeof(arr) / sizeof(arr[0]);
	int X = 91;
	findFourElements(arr, n, X);
	return 0;
}
